@using System.Text.Json;
@using GanzNet.Common;

@{
    List<Tree<Tuple<string, string>>> tree = new List<Tree<Tuple<string, string>>>();
    List<Tree<Tuple<string, string>>> currentLevel = tree;
    List<Tree<Tuple<string, string>>> prevLevel = null;
    int prevLevelId = 1;

    foreach (JsonElement element in this.JsonSource.RootElement.GetProperty("blocks").EnumerateArray())
    {
        JsonElement data = element.GetProperty("data");
        switch (element.GetProperty("type").GetString())
        {
            case "header":
                int level = int.Parse(data.GetProperty("level").ToString());
                string text = data.GetProperty("text").GetString();

                if (level > prevLevelId)
                {
                    prevLevel = currentLevel;
                    if (currentLevel.Count == 0)
                    {
                        currentLevel.Add(new Tree<Tuple<string, string>>());
                    }
                    currentLevel = currentLevel.Last().Children;
                    prevLevelId = level;
                }
                else if (level < prevLevelId)
                {
                    currentLevel = prevLevel;
                    prevLevelId = level;
                }

                currentLevel.Add(new Tree<Tuple<string, string>>
                {
                    Item = new Tuple<string, string>($"{NavMan.Uri}#{text}", text),
                });
                break;
        }
    }
    int i = 0;
}

<TreeLevel T="Tuple<string, string>" Items="tree">
    <ItemTemplate>
        @if (context != null)
        {
            <a href="@context.Item1">@context.Item2</a>
        }
    </ItemTemplate>
</TreeLevel>

@code
{
    [Inject]
    public NavigationManager NavMan { get; set; }

    [Parameter]
    public string Source { get; set; }

    public JsonDocument JsonSource
    {
        get
        {
            if (this.Source == null)
            {
                this.Source = "{\"blocks\": []}";
            }
            return JsonDocument.Parse(this.Source, new JsonDocumentOptions { AllowTrailingCommas = true });
        }
    }
}