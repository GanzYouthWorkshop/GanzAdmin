@using GanzAdmin.Authentication.Components;
@using GanzAdmin.Database.Models;

@typeparam ItemType
@inherits EditField<PartParameter>

<p class="@(this.Inline ? "inline" : "")">
    <AuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        @if (this.IsDefaultEditor)
        {
            <input type="text" @bind-value="this.Value.Name" name="@this.Name" placeholder="Név" />

        }
        else
        {
            <label for="@this.Name">@this.Value.Name:</label>
        }
    </AuthorizedView>
    <NonAuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        <label for="@this.Name">@this.Value.Name:</label>
    </NonAuthorizedView>

    <AuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        @if (this.Value.IsSelectValue && !this.IsDefaultEditor)
        {
            <select name="@this.Name" @onchange="OnValueChanged">
                <option value="0">-</option>
                @foreach (string item in this.Value.SelectOptions)
                {
                    if (item.Equals(this.Value.Value))
                    {
                        <option value="@item" selected>@item</option>
                    }
                    else
                    {
                        <option value="@item">@item</option>
                    }
                }
            </select>
        }
        else
        {
            <input type="text" @bind-value="this.Value.Value" name="@this.Name" placeholder="Érték" />
        }

        @if (this.IsDefaultEditor)
        {
            <input type="text" @bind-value="this.Value.Unit" name='@(this.Name+"unit")' placeholder="Mértékegység" />
        }
        else
        {
            <span>@this.Value.Unit</span>
        }

    </AuthorizedView>
    <NonAuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        <span>@this.Value</span>
        <span>@this.Value.Unit</span>
    </NonAuthorizedView>
</p>

@code
{
    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public bool IsDefaultEditor { get; set; }

    protected override Task OnValueChanged(ChangeEventArgs e)
    {
        this.Value.Value = e.Value.ToString();
        return this.ValueChanged.InvokeAsync((PartParameter)this.Value);
    }
}