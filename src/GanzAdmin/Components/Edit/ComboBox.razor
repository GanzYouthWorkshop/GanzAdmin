@using GanzAdmin.Authentication.Components;
@using GanzAdmin.Database.Models;

@typeparam ItemType
@inherits EditField<ItemType>

<p class="@(this.Inline ? "inline" : "")">
    <label for="@this.Name">@this.Display:</label>
    <AuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        <select name="@this.Name" @onchange="OnValueChanged">
            <option value="0">-</option>
            @foreach (ItemType item in Items)
            {
                if (!item.Equals(this.Owner))
                {
                    if (item.Equals(this.Value))
                    {
                        <option value="@((item as IEntity).Id)" selected>@((item as IEntity).DisplayValue)</option>
                    }
                    else
                    {
                        <option value="@((item as IEntity).Id)">@((item as IEntity).DisplayValue)</option>
                    }
                }
            }
        </select>
    </AuthorizedView>
    <NonAuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        <span>@((this.Value as IEntity).DisplayValue)</span>
    </NonAuthorizedView>
</p>

@code
{
    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public IEnumerable<ItemType> Items { get; set; }

    [Parameter]
    public ItemType Owner { get; set; }

    protected override Task OnValueChanged(ChangeEventArgs e)
    {
        this.Value = this.Items.FirstOrDefault(i => ((IEntity)i).Id == Convert.ToInt64(e.Value));

        this.Changed.InvokeAsync((ItemType)Value);
        return this.ValueChanged.InvokeAsync((ItemType)Value);
    }
}