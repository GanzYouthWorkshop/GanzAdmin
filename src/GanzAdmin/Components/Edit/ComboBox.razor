@using GanzAdmin.Authentication.Components;
@using GanzAdmin.Database.Models;

@typeparam ItemType
@inherits EditField<ItemType>

<p class="@(this.Inline ? "inline" : "")">
    <label for="@this.Name">@this.Display:</label>
    <AuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        <select name="@this.Name" @onchange="OnValueChanged">
            @if (!this.NoNullValue)
            {
                <option value="0">-</option>
            }
            @foreach (ItemType item in Items)
            {
                if (!item.Equals(this.Owner) || this.NoNullValue)
                {
                    string val;
                    string display;

                    if (item is IEntity)
                    {
                        val = (item as IEntity).Id.ToString();
                        display = (item as IEntity).DisplayValue;
                    }
                    else if(item is Enum)
                    {
                        val = item.ToString();
                        display = item.ToString();
                    }
                    else
                    {
                        val = item.ToString();
                        display = item.ToString();
                    }

                    if (item.Equals(this.Value))
                    {
                        <option value="@val" selected>@display</option>
                    }
                    else
                    {
                        <option value="@val">@display</option>
                    }
                }
            }
        </select>
    </AuthorizedView>
    <NonAuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        <span>@((this.Value as IEntity)?.DisplayValue)</span>
    </NonAuthorizedView>
</p>

@code
{
    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public IEnumerable<ItemType> Items { get; set; }

    [Parameter]
    public ItemType Owner { get; set; }

    [Parameter]
    public bool NoNullValue { get; set; }

    protected override Task OnValueChanged(ChangeEventArgs e)
    {
        if (typeof(ItemType).GetInterfaces().Contains(typeof(IEntity)))
        {
            this.Value = this.Items.FirstOrDefault(i => ((IEntity)i).Id == Convert.ToInt64(e.Value));
        }
        else if (this.Value is Enum)
        {
            this.Value = (ItemType)Enum.Parse(typeof(ItemType), e.Value.ToString());
        }
        else
        {
            try
            {
                this.Value = (ItemType)e.Value;
            }
            catch(Exception)
            {

            }
        }

        this.Changed.InvokeAsync((ItemType)Value);
        if (this.PreventRenderOnChange)
        {
            return this.OnValueChangedOnly();
        }
        else
        {
            return this.OnValueChangedWithRender();
        }
    }
}