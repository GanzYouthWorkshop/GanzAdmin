@using GanzAdmin.Authentication.Components;
@using GanzAdmin.Database.Models;

@inherits EditField<string>

<p class="@(this.Inline ? "inline" : "")">
    <label for="@this.Name">@this.Display:</label>
    <AuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        <div class="filebox">
            <form @ref="this.html" class="box" method="post" action="./api/upload" enctype="multipart/form-data">
                @if(this.IsImage)
                {
                    <img class="upload-preview" src="@this.Value" />
                }
                <input type="hidden" @bind="@this.Value" />
                <input class="" type="file" name="@this.Name" />
                <strong>Húzd ide a fájlt!</strong>
            </form>
        </div>
    </AuthorizedView>
    <NonAuthorizedView NeededRolesOR="@this.AuthOR" NeededRolesAND="@this.AuthAND">
        @*<span>@((this.Value as IEntity).DisplayValue)</span>*@
    </NonAuthorizedView>
</p>

@code
{
    [Inject]
    protected IJSRuntime JS { get; set; }

    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public bool MultiSelect { get; set; }

    [Parameter]
    public EventCallback UploadStarted { get; set; }

    private ElementReference html;

    public bool IsImage
    {
        get
        {
            if(this.Value != null)
            {
                switch(this.Value.Split('.').Last().ToLower())
                {
                    case "bmp":
                    case "png":
                    case "jpg":
                    case "jpeg":
                    case "gif":
                        return true;

                    default:
                        return false;
                }
            }
            return false;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender)
        {
            this.JS.InvokeVoidAsync("createUploader", html);
        }
    }
}