@page "/payments"
@page "/payments/{PopupDisplay}"

@inherits DataHandlingController<Payment>

<AuthorizedView NeededRolesOR="@Permissions.ListPayments">
    <aside class='@(this.ItemList == null ? "loading" : "")'>
        <AuthorizedView NeededRolesOR="@Permissions.EditPayments">
            <NavLink class="addlink" href="@($"/{this.BaseLink}/add")">Új @this.DataName</NavLink>
        </AuthorizedView>
    </aside>

    <main class='@(this.ItemList == null ? "loading" : "")'>
        <CalendarControl ItemCollections="this.m_Items" />
    </main>

    @if (this.SelectedItem != null)
    {
        <section class='popup' id='content'>
            <div class='shadow'></div>
            <div class='body'>
                <div class='header'>
                    <h2>@this.PopupTitle</h2>
                    <a class='button' href="@($"/{this.BaseLink}")"></a>
                </div>

                <EditForm method="post" EditContext="new EditContext(true)" OnValidSubmit="OnDefaultAddEditSubmit">
                    <div class='dynamic'>
                        <ComboBox AuthOR="@Permissions.EditPayments" ItemType="Member" Items="(GanzAdminDbEngine.Instance.Members.FindAll().OrderBy(m => m.Name))" Display="Befizető" NoNullValue @bind-Value="@this.SelectedItem.Temporal.Member" Name="@nameof(Member.MainActivity)"></ComboBox>
                        <SimpleDateField AuthOR="@Permissions.EditPayments" Type="text" Display="Időpont" Name="@nameof(Payment.Occasion)" @bind-Value="this.SelectedItem.Temporal.Occasion" />
                        <SimpleNumberField AuthOR="@Permissions.EditPayments" Type="text" Display="Érték" Name="@nameof(Payment.Value)" Step="1" Unit="Ft" @bind-Value="this.SelectedItem.Temporal.Value" />
                        <SimpleCheckField AuthOR="@Permissions.EditPayments" Type="switch" Display="Befizetett kitolása" @bind-Value="SetPaymentDate" />
                        <SimpleDateField AuthOR="neveredit" Type="text" Display="Kitolt befizetés" Name="PaidUntil" Value="CalculateNewPaidUntil()" />
                    </div>

                    <AuthorizedView NeededRolesOR="@Permissions.EditPayments">
                        <button type='submit'>Küldés</button>
                    </AuthorizedView>

                    @if (this.PopupDisplay != "add")
                    {
                        <AuthorizedView NeededRolesOR="@Permissions.DeletePayments">
                            <input type='button' class="delete" value="Törlés" @onclick="OnDefaultDeleteSubmit" />
                        </AuthorizedView>
                    }
                </EditForm>
            </div>
            @if (this.DialogLoading)
            {
                <div class='loading'></div>
            }
        </section>
    }
</AuthorizedView>

@code
{
    protected override string BaseLink { get; set; } = "payments";
    protected override string DataName { get; set; } = "befizetés";

    private List<CalendarItemCollection> m_Items = new List<CalendarItemCollection>()
    {
        new CalendarItemCollection()
        {
            Color = "#ffe869",
            Collect = new Func<IEnumerable<CalendarItem>>(() =>
            {
                return GanzAdminDbEngine.Instance.GetCollection<Payment>().FindAll().Select(p => new CalendarItem()
                {
                    DisplayText = $"{p.Member.Name} : {p.Value} Ft",
                    Event = p,
                    Url = $"payments/{p.Id}"
                });
            })
        }
    };

    public bool SetPaymentDate { get; set; } = true;

    protected override bool BeforeAdd()
    {
        if (SetPaymentDate)
        {
            using (GanzAdminDbEngine db = GanzAdminDbEngine.GetInstance())
            {
                db.BeginTransaction();

                Member member = db.Members.FindById(this.SelectedItem.Temporal.Member.Id);
                member.PaidUntil = CalculateNewPaidUntil();
                db.Members.Update(member);

                db.Transact();
            }
        }
        return true;
    }

    protected override bool BeforeEdit()
    {
        return true;
    }

    protected override bool BeforeDelete()
    {
        return true;
    }

    private DateTime CalculateNewPaidUntil()
    {
        //TODO config
        int costPerMonth = 9000;
        int costPer3Months = 25000;

        string month1 = GlobalSetting.GetSetting("MemberFee1Month");
        string month3 = GlobalSetting.GetSetting("MemberFee3Month");

        if (!string.IsNullOrEmpty(month1) && int.TryParse(month1, out int tmp))
        {
            costPerMonth = tmp;
        }

        if (!string.IsNullOrEmpty(month3) && int.TryParse(month3, out int tmp2))
        {
            costPer3Months = tmp2;
        }

        int currentPayment = this.SelectedItem.Temporal.Value;
        int month3Count = currentPayment / costPer3Months * 90;
        double month1Count = (currentPayment % costPer3Months) / (float)costPerMonth * 30;

        return DateTime.Today.AddDays((int)(month3Count + month1Count));
    }
}
