@page "/members"
@page "/members/{PopupDisplay}"

@using GanzAdmin.Authentication.Components;
@using GanzAdmin.Components.Edit;
@using GanzAdmin.Components.DataGrid;
@using GanzAdmin.Database;
@using GanzAdmin.Database.Models;
@using GanzAdmin.Utils;

<aside class='loading'>
    <NavLink class="addlink" href="@($"/{BASELINK}/add")">Új tag</NavLink>
</aside>

<main class='@(this.MemberList == null ? "loading" : "")'>
    @if (this.MemberList != null)
    {
        <div id='table-wrapper'>
            <table id='table-header'>
                <thead>
                    <tr>
                        <DataGridHeader IsPinnable IsSortable>Név</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Aktív?</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Tagdíj befizetve</DataGridHeader>
                    </tr>
                </thead>
            </table>

            <table id='data' class="display nowrap">
                <thead>
                    <tr>
                        <DataGridHeader IsPinnable IsSortable>Név</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Aktív?</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Tagdíj befizetve</DataGridHeader>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var member in this.MemberList)
                    {
                        <tr>
                            <td><NavLink href="@($"/{BASELINK}/{member.Id}")">@member.Name</NavLink></td>
                            <td>@member.Active</td>
                            <td>@member.PaidUntil</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</main>

@*Ki kéne még jelezni, hogy szerkesztünk vagy hozzáadunk...*@
@if (this.SelectedMember != null)
{
    <section class='popup' id='content'>
        <div class='shadow'></div>
        <div class='body'>
            <NavLink href="@($"/{BASELINK}")" class='close'></NavLink>
            <EditForm method="post" EditContext="new EditContext(true)" OnValidSubmit="OnAddEditSubmit">
                <h3>@this.PopupTitle</h3>
                <div class='dynamic'>
                    <SimpleEditField Type="text" Display="Név" Name="@nameof(Member.Name)" @bind-Value="this.SelectedMember.Temporal.Name" />
                </div>
                <AuthorizedView NeededRolesOR="TEEEST">
                    <button type='submit'>Küldés</button>
                    <NavLink href='@($"/{BASELINK}")'>Mégse</NavLink>
                </AuthorizedView>
            </EditForm>
        </div>
    </section>
}


@code
{
        #region Közös dolgok
    private const string BASELINK = "members";
    private const string DATANAME = "tag";

    [Inject]
    private NavigationManager NavMan { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Parameter]
    public string PopupDisplay { get; set; }
    #endregion

    #region Oldal-specifikus dolgok
    private List<Member> MemberList { get; set; }

    private TemporalObject<Member> SelectedMember { get; set; }

    private string PopupTitle
    {
        get { return this.PopupDisplay == "add" ? $"Új {DATANAME}" : $"{this.SelectedMember.Original.Username} szerkesztése"; }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            using (GanzAdminDbContext db = new GanzAdminDbContext())
            {
                this.MemberList = db.Members.FindAll().ToList();
            }
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() =>
        {
            this.SelectedMember = null;

            if (this.PopupDisplay == "add")
            {
                this.SelectedMember = new TemporalObject<Member>(new Member());
            }
            else if (this.PopupDisplay != null)
            {
                int showId = 0;
                if (int.TryParse(this.PopupDisplay, out showId))
                {
                    Member member = this.MemberList.FirstOrDefault(m => m.Id == showId);
                    this.SelectedMember = new TemporalObject<Member>(member);
                }
            }
        });
    }

    private void OnAddEditSubmit()
    {
        if (this.PopupDisplay == "add")
        {
            this.AddMember();
        }
        else
        {
            this.ModifMember();
        }
        this.NavMan.NavigateTo($"/{BASELINK}");
    }

    private void AddMember()
    {
        using (GanzAdminDbContext db = new GanzAdminDbContext())
        {
            db.Members.Insert(this.SelectedMember.FoldBack());
        }
        this.JS.InvokeVoidAsync("alertify.success", "Tag hozzáadva!");
    }

    private void ModifMember()
    {
        using (GanzAdminDbContext db = new GanzAdminDbContext())
        {
            db.Members.Update(this.SelectedMember.FoldBack());
        }
        this.JS.InvokeVoidAsync("alertify.success", "Tag módosítva!");
    }

    private void DeleteMember()
    {
        using (GanzAdminDbContext db = new GanzAdminDbContext())
        {
            db.Members.Delete(this.SelectedMember.Original.Id);
        }
    }
}
