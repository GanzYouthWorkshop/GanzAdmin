@page "/members"
@page "/members/{PopupDisplay}"

@using GanzAdmin.Authentication.Components;
@using GanzAdmin.Components.Edit;
@using GanzAdmin.Components.DataGrid;
@using GanzAdmin.Database;
@using GanzAdmin.Database.Models;
@using GanzAdmin.Utils;

<aside class='loading'>
    <NavLink class="addlink" href="@($"/{BASELINK}/add")">Új @DATANAME</NavLink>
</aside>

<main class='@(this.ItemList == null ? "loading" : "")'>
    @if (this.ItemList != null)
    {
        <div id='table-wrapper'>
            <table id='table-header'>
                <thead>
                    <tr>
                        <DataGridHeader IsPinnable IsSortable>Név</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Aktív?</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Tagdíj befizetve</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Foglalkozásra bejegyzés</DataGridHeader>
                    </tr>
                </thead>
            </table>

            <table id='data' class="display nowrap">
                <thead>
                    <tr>
                        <DataGridHeader IsPinnable IsSortable>Név</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Aktív?</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Tagdíj befizetve</DataGridHeader>
                        <DataGridHeader IsCollapsible IsSortable>Foglalkozásra bejegyzés</DataGridHeader>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var member in this.ItemList)
                    {
                    <tr>
                        <td><NavLink href="@($"/{BASELINK}/{member.Id}")">@member.Name</NavLink></td>
                        <td>@member.Active</td>
                        <td>@member.PaidUntil</td>
                        <td>
                            @if(!member.Attendances.Exists(a => a.Occasion.Date == DateTime.Today))
                            {
                                <a @onclick="() => this.OnLogAttenance(member)">Jelenléti ív kitöltés</a>
                            }
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</main>

@if (this.SelectedItem != null)
{
<section class='popup' id='content'>
    <div class='shadow'></div>
    <div class='body'>
        <NavLink href="@($"/{BASELINK}")" class='close'></NavLink>
        <EditForm method="post" EditContext="new EditContext(true)" OnValidSubmit="OnAddEditSubmit">
            <h3>@this.PopupTitle</h3>
            <div class='dynamic'>
                <SimpleEditField Type="text" Display="Név" Name="@nameof(Member.Name)" @bind-Value="this.SelectedItem.Temporal.Name" />
                <SimpleEditField Type="text" Display="Cím" Name="@nameof(Member.Address)" @bind-Value="this.SelectedItem.Temporal.Address" />
                <SimpleEditField Type="text" Display="Telefon" Name="@nameof(Member.Phone)" @bind-Value="this.SelectedItem.Temporal.Phone" />
                <SimpleEditField Type="text" Display="Email" Name="@nameof(Member.Email)" @bind-Value="this.SelectedItem.Temporal.Email" />
                <SimpleEditField Type="password" Display="Jelszó" Name="@nameof(Member.Password)" @bind-Value="this.SelectedItem.Temporal.Password" />
            </div>
            <AuthorizedView NeededRolesOR="TEEEST">
                <button type='submit'>Küldés</button>
                <NavLink href='@($"/{BASELINK}")'>Mégse</NavLink>
            </AuthorizedView>
        </EditForm>
    </div>
    @if (this.DialogLoading)
    {
        <div class='loading'></div>
    }
</section>
}


@code
{
    #region Közös dolgok
    private const string BASELINK = "members";
    private const string DATANAME = "tag";

    [Inject]
    private NavigationManager NavMan { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Parameter]
    public string PopupDisplay { get; set; }

    private bool DialogLoading { get; set; } = false;
    #endregion

    #region Oldal-specifikus dolgok
    private List<Member> ItemList { get; set; }

    private TemporalObject<Member> SelectedItem { get; set; }

    private string PopupTitle
    {
        get { return this.PopupDisplay == "add" ? $"Új {DATANAME}" : $"{this.SelectedItem?.Original.Username} szerkesztése"; }
    }

    #endregion

    #region CRUD metódusok
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            GanzAdminDbEngine db = GanzAdminDbEngine.Instance;
            this.ItemList = db.Members.FindAll().ToList();
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() =>
        {
            this.SelectedItem = null;

            if (this.PopupDisplay == "add")
            {
                this.SelectedItem = new TemporalObject<Member>(new Member());
            }
            else if (this.PopupDisplay != null)
            {
                int showId = 0;
                if (int.TryParse(this.PopupDisplay, out showId))
                {
                    Member item = this.ItemList.FirstOrDefault(i => i.Id == showId);
                    this.SelectedItem = new TemporalObject<Member>(item);
                }
            }
        });
    }

    private void OnAddEditSubmit()
    {
        Task.Run(() =>
        {
            this.DialogLoading = true;
            if (this.PopupDisplay == "add")
            {
                this.Add();
            }
            else
            {
                this.Modify();
            }
            this.DialogLoading = false;
            this.NavMan.NavigateTo($"/{BASELINK}");
        });
    }

    private void Add()
    {
        this.SelectedItem.Temporal.Password = GanzUtils.Sha256(this.SelectedItem.Temporal.Password);
        GanzAdminDbEngine.Instance.Members.Insert(this.SelectedItem.FoldBack());

        this.JS.InvokeVoidAsync("alertify.success", "Tag hozzáadva!");
    }

    private void Modify()
    {
        this.SelectedItem.Temporal.Password = GanzUtils.Sha256(this.SelectedItem.Temporal.Password);
        GanzAdminDbEngine.Instance.Members.Update(this.SelectedItem.FoldBack());

        this.JS.InvokeVoidAsync("alertify.success", "Tag módosítva!");
    }

    //TODO
    private void Delete()
    {
        GanzAdminDbEngine.Instance.Members.Delete(this.SelectedItem.Original.Id);

        this.JS.InvokeVoidAsync("alertify.success", "Tag törölev :(");
    }
    #endregion

    #region Egyéb metódusok
    private void OnLogAttenance(Member member)
    {
        GanzAdminDbFunctions.LogAttendance(member, DateTime.Today);
        this.JS.InvokeVoidAsync("alertify.success", "Jelenléti ív frissítve!");
    }
    #endregion
}
