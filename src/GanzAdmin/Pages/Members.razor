@page "/me"
@page "/members"
@page "/members/{PopupDisplay}"
@page "/members/filter/{FilterId}"

@inherits DataHandlingController<Member>

<AuthorizedView NeededRolesOR="@Permissions.ListMembers">
    <aside class='@(this.ItemList == null ? "loading" : "")'>
        <ul>
            <li><a href="@($"/{this.BaseLink}/filter/active")">Aktív tagok</a></li>
            <li> <a href="@($"/{this.BaseLink}/filter/electro")">Elektro tagok</a></li>
            <li><a href="@($"/{this.BaseLink}/filter/model")">Modellezés tagok</a></li>
            <li><a href="@($"/{this.BaseLink}/filter/payment-necessary")">Fizetés szükséges</a></li>
        </ul>
        <AuthorizedView NeededRolesOR="@Permissions.EditMembers">
            <NavLink class="addlink" href="@($"/{this.BaseLink}/add")">Új @this.DataName</NavLink>
        </AuthorizedView>
    </aside>

    <main class='@(this.ItemList == null ? "loading" : "")'>
        @if (this.ItemList != null)
        {
            <div id='table-wrapper'>
                <table id='data' class="display nowrap">
                    <thead>
                        <tr>
                            <DataGridHeader></DataGridHeader>
                            <DataGridHeader IsPinnable IsSortable>Név</DataGridHeader>
                            <DataGridHeader IsCollapsible IsSortable>Foglalkozás</DataGridHeader>
                            <DataGridHeader IsCollapsible IsSortable>Aktív?</DataGridHeader>
                            <DataGridHeader IsCollapsible IsSortable>Utolsó jelenlét</DataGridHeader>
                            <DataGridHeader IsCollapsible IsSortable>Tagdíj befizetve</DataGridHeader>
                            <AuthorizedView NeededRolesOR="@Permissions.EditMembers">
                                <DataGridHeader IsCollapsible IsSortable>Foglalkozásra bejegyzés</DataGridHeader>
                            </AuthorizedView>
                        </tr>
                    </thead>

                    <tbody>
                        @{
                            List<Member> iterationCollection = this.ItemList;
                            switch (this.FilterId)
                            {
                                case "active": iterationCollection = this.ItemList.Where(i => i.Active).ToList(); break;
                                case "electro": iterationCollection = this.ItemList.Where(i => i.MainActivity == Member.Activities.Electronics || i.MainActivity == Member.Activities.Tutor).ToList(); break;
                                case "model": iterationCollection = this.ItemList.Where(i => i.MainActivity == Member.Activities.Modelling || i.MainActivity == Member.Activities.Tutor).ToList(); break;
                                case "payment-necessary": iterationCollection = this.ItemList.Where(i => i.Active && i.PaidUntil < DateTime.Today).ToList(); break;

                            }
                        }

                        @foreach (Member member in iterationCollection)
                        {
                        <tr>
                            <td><input type="checkbox" @onchange="(e) => this.ToolProvider.AddRemove(member)" /></td>

                            <td><NavLink href="@($"/{this.BaseLink}/{member.Id}")">@member.Name</NavLink></td>
                            <td>@(this.ActivityText(member.MainActivity))</td>
                            <td>@(member.Active ? "🟩 Igen" : "🟥 Nem")</td>
                            <td>
                                @{
                                    Attendance att = GanzAdminDbEngine.Instance.Attendances.FindAll().Where(a => a.MemberId == member.Id).OrderByDescending(a => a.Occasion).FirstOrDefault();
                                    if (att != null)
                                    {
                                        <span>@att.Occasion</span>
                                    }
                                }
                            </td>
                            <td>
                                @member.PaidUntil
                                @if (member.Active && member.PaidUntil < DateTime.Now)
                                {
                                    <span> ❗</span>
                                }
                            </td>
                            <AuthorizedView NeededRolesOR="@Permissions.EditMembers">
                                <td>

                                    @if (!member.Attendances.Exists(a => a.Occasion.Date == DateTime.Today))
                                    {
                                        <a @onclick="() => this.OnLogAttenance(member)">Jelenléti ív kitöltés</a>
                                    }

                                </td>
                            </AuthorizedView>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </main>

    @if (this.SelectedItem != null)
    {
        <section class='popup' id='content'>
            <div class='shadow'></div>
            <div class='body'>
                <div class='header'>
                    <h2>@this.PopupTitle</h2>
                    <a class='button' href="@($"/{this.BaseLink}")"></a>
                </div>

                <EditForm method="post" EditContext="new EditContext(true)" OnValidSubmit="OnDefaultAddEditSubmit">
                    <div class='dynamic'>
                        <SimpleTextField AuthOR="@Permissions.EditMembers" Type="text" Display="Név" Name="@nameof(Member.Name)" @bind-Value="this.SelectedItem.Temporal.Name" />
                        <SimpleTextField AuthOR="@Permissions.EditMembers" Type="text" Display="Cím" Name="@nameof(Member.Address)" @bind-Value="this.SelectedItem.Temporal.Address" />
                        <SimpleTextField AuthOR="@Permissions.EditMembers" Type="text" Display="Telefon" Name="@nameof(Member.Phone)" @bind-Value="this.SelectedItem.Temporal.Phone" />
                        <SimpleTextField AuthOR="@Permissions.EditMembers" Type="text" Display="Email" Name="@nameof(Member.Email)" @bind-Value="this.SelectedItem.Temporal.Email" />

                        <ComboBox AuthOR="@Permissions.EditMembers" ItemType="Member.Activities" Items="(Member.Activities[])Enum.GetValues(typeof(Member.Activities))" Display="Foglalkozás" NoNullValue @bind-Value="@this.SelectedItem.Temporal.MainActivity" Name="@nameof(Member.MainActivity)"></ComboBox>
                        <SimpleDateField AuthOR="@Permissions.EditMembers" Type="text" Display="Tagdíj befizetve" Name="@nameof(Member.PaidUntil)" @bind-Value="this.SelectedItem.Temporal.PaidUntil" />
                        <SimpleCheckField AuthOR="@Permissions.EditMembers" Type="switch" Display="Aktív?" TrueValue="🟩 Igen" FalseValue="🟥 Nem" Name="@nameof(Member.Active)" @bind-Value="@this.SelectedItem.Temporal.Active" />


                        <SimpleTextField AuthOR="@Permissions.EditMembers" Type="text" Display="Felhasználónév" Name="@nameof(Member.Username)" @bind-Value="this.SelectedItem.Temporal.Username" />
                        <SimpleTextField AuthOR="@Permissions.EditMembers" Type="password" Display="Jelszó" Name="@nameof(Member.Password)" @bind-Value="this.Password" />

                        <div class="permissoins-container">
                            @foreach (string permission in Permissions.AllPermissions)
                            {
                                if (permission != null)
                                {
                                    bool temp = this.SelectedItem.Temporal.Roles.Contains(permission);
                                    <SimpleCheckField AuthAND="@($"{Permissions.EditParts} {permission}")"
                                                      Inline
                                                      Type="switch"
                                                      Display="@permission"
                                                      Name="@permission"
                                                      TrueValue="Igen"
                                                      FalseValue="Nem"
                                                      Value="@temp"
                                                      ValueChanged="@(e => this.EditPermission(permission, e))" />
                                }
                                else
                                {
                                    <span></span>
                                }
                            }
                        </div>
                    </div>
                    <AuthorizedView NeededRolesOR="@Permissions.EditMembers">
                        <button type='submit'>Küldés</button>
                    </AuthorizedView>
                    @if (this.PopupDisplay != "add")
                    {
                        <AuthorizedView NeededRolesOR="@Permissions.DeleteMembers">
                            <input type='button' class="delete" value="Törlés" @onclick="OnDefaultDeleteSubmit" />
                        </AuthorizedView>
                    }
                </EditForm>
            </div>
            @if (this.DialogLoading)
            {
                <div class='loading'></div>
            }
        </section>
    }
</AuthorizedView>

@code
{
    protected override string BaseLink { get; set; } = "members";
    protected override string DataName { get; set; } = "tag";

    [Parameter]
    public string FilterId { get; set; } = null;

    private bool PasswordChanged { get; set; }

    private string Password
    {
        get { return this.m_Password; }
        set { this.m_Password = value; this.PasswordChanged = true; }
    }
    private string m_Password;


    protected override bool BeforeAdd()
    {
        this.SelectedItem.Temporal.Password = GanzUtils.Sha256(this.Password);
        return true;
    }

    protected override bool BeforeEdit()
    {
        if(this.PasswordChanged)
        {
            if(this.SelectedItem.Original.Roles.Contains(Permissions.Overlord) && !this.AuthManager.CheckAuth(Permissions.Overlord, ""))
            {
                //Ha a sz editált user overlord és az editáló nem az, ne legyen jelszó átírás!
                return true;
            }

            if (this.Password != null)
            {
                this.SelectedItem.Temporal.Password = GanzUtils.Sha256(this.Password);
            }
        }
        else
        {
            this.SelectedItem.Temporal.Password = this.SelectedItem.Original.Password;
        }
        return true;
    }

    protected override bool BeforeDelete()
    {
        if (this.SelectedItem.Original.Roles.Contains(Permissions.Overlord) && !this.AuthManager.CheckAuth(Permissions.Overlord, ""))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private void OnLogAttenance(Member member)
    {
        GanzAdminDbFunctions.LogAttendance(member, DateTime.Today);

        this.JS.InvokeVoidAsync("alertify.success", "Jelenléti ív frissítve!");
    }

    private void EditPermission(string permission, bool value)
    {
        if(value)
        {
            this.SelectedItem.Temporal.Roles.Add(permission);
        }
        else
        {
            this.SelectedItem.Temporal.Roles.RemoveAll(i => i == permission);
        }
    }

    private string ActivityText(Member.Activities activity)
    {
        switch(activity)
        {
            case Member.Activities.Electronics: return "⚡ elektronika";
            case Member.Activities.Modelling: return "🔨 modellezés";
            case Member.Activities.Tutor: return "📗 oktató";
        }
        return null;
    }
}
