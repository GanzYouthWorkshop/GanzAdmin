@page "/member-projects"

@page "/member-projects/{PopupDisplay}"
@page "/member-projects/{PopupDisplay}/{PopupDisplay2}"
@page "/member-projects/{PopupDisplay}/{PopupDisplay2}/{LogPopupDisplay}"

@using  GanzAdmin.Components.Edit;

@inherits DataHandlingController<MemberProject>


@if (this.SelectedItem == null)
{
    <!--#region Listázás-->
    <aside class='@(this.ItemList == null ? "loading" : "")'>
        <AuthorizedView NeededRolesOR="@Permissions.EditLocations">
            <NavLink class="addlink" href="@($"/{this.BaseLink}/add")">Új @this.DataName</NavLink>
        </AuthorizedView>
    </aside>

    <main class='@(this.ItemList == null ? "simple-ui loading" : "simple-ui")'>
        @if (this.ItemList != null)
        {
            @foreach (MemberProject item in this.ItemList)
            {
                <section class="entry-item">
                    <img srv="@item.Logo" />
                    <h2>@item.Name</h2>
                    <p>Állapot: @item.IsFinished</p>
                    <p>
                        Résztvevők:
                        @foreach (Member member in item.Members)
                        {
                            <span>@member.Name, </span>
                        }
                    </p>
                    <p>@item.Description</p>
                    <NavLink class="button" href="@($"/{this.BaseLink}/{item.Id}")">Részletek</NavLink>
                </section>
            }
        }
    </main>
    <!--#endregion-->
}
else
{
    <main class='full'>
        @switch (this.Display)
        {
            case DisplayType.Show:
                <!--#region Részletek-->
                <section>
                    <h2>@this.SelectedItem.Original.Name</h2>
                    @if (HasLocalAuthorization)
                    {
                        <NavLink class="button" href="@($"/{this.BaseLink}/{this.SelectedItem.Original.Id}/edit")">Szerkesztés</NavLink>
                        <NavLink class="button" href="@($"/{this.BaseLink}/{this.SelectedItem.Original.Id}/log/add")">Új naplóbejegyzés</NavLink>
                    }
                    <img srv="@this.SelectedItem.Original.Logo" />
                    <p>Állapot: @this.SelectedItem.Original.IsFinished</p>
                    <p>
                        Résztvevők:
                        @foreach (Member member in this.SelectedItem.Original.Members)
                        {
                            <span>@member.Name, </span>
                        }
                    </p>
                    <WysiwygViewer Source="@this.SelectedItem.Original.Description"></WysiwygViewer>
                    <h3>Fejlesztési napló</h3>
                    <ul class='timeline'>
                        @foreach (LogEntry entry in this.SelectedItem.Original.ProjectLog.OrderByDescending(log => log.StartTime).Take(5))
                        {
                            <li class='work'>
                                <input class='radio' id='work5' name='works' type='radio' checked>
                                <div class="relative">
                                    @*<label for='work5'>Lorem ipsum dolor sit amet</label>*@
                                    <span class='date'>@entry.StartTime</span>
                                    <span class='circle'></span>
                                </div>
                                <div class='content'>
                                    <NavLink class="button" href="@($"/{this.BaseLink}/{this.SelectedItem.Original.Id}/log/{entry.Id}")">Szerkesztés</NavLink>
                                    <WysiwygViewer Source="@entry.Content"></WysiwygViewer>
                                </div>
                            </li>



                            @*<section class="entry-item">
                                <h4>@entry.StartTime</h4>
                                @if (HasLocalAuthorization)
                                {
                                    <NavLink class="button" href="@($"/{this.BaseLink}/{this.SelectedItem.Original.Id}/log/{entry.Id}")">Szerkesztés</NavLink>
                                }
                                <WysiwygViewer Source="@entry.Content"></WysiwygViewer>
                            </section>*@
                        }
                    </ul>
                </section>
                <!--#endregion-->
                break;

            case DisplayType.Add:
            case DisplayType.EditSummary:
                <!--#region Hozzáadás/Szerkesztés-->
                @if (HasLocalAuthorization)
                {
                    <EditForm EditContext="new EditContext(true)"  OnSubmit="OnDefaultAddEditSubmit">
                        <h2>"@this.SelectedItem.Original.Name" szerkesztése</h2>
                        <SimpleTextField @bind-Value="this.SelectedItem.Temporal.Name" Name="name" Display="Projektnév" Type="text"></SimpleTextField>

                        @*TODO fel kéne tudni tölteni a képet*@
                        <img src="@this.SelectedItem.Original.Logo" />

                        <SimpleCheckField Type="switch" Display="Befejezett" Name="finished" @bind-Value="@this.SelectedItem.Temporal.IsFinished" />

                        @*TODO: Kelleni fog egy tag-szerkesztő felület is!*@
                        <p>
                            Résztvevők: TODO
                        </p>

                        <WysiwygEditor @bind-Value="this.SelectedItem.Temporal.Description"></WysiwygEditor>

                        <button type='submit'>Küldés</button>
                        @if (this.Display == DisplayType.EditSummary)
                        {
                            <AuthorizedView NeededRolesOR="@Permissions.DeleteProject">
                                <input type='button' class="delete" value="Törlés" @onclick="OnDefaultDeleteSubmit" />
                            </AuthorizedView>
                        }
                    </EditForm>
                }
                else
                {
                    <p>Neked ilyet nem szabad :(</p>
                }
                <!--#endregion-->
                break;
            case DisplayType.AddLog:
            case DisplayType.EditLog:
                <!--#region Napló hozzáadás/szerkesztés-->
                @if (HasLocalAuthorization)
                {
                    if(this.SelectedLogEntry != null)
                    {
                        //TODO
                        <EditForm EditContext="new EditContext(true)" OnSubmit="OnLogAddEditSubmit">
                            <h2>Naplóbejegyzés szerkesztése</h2>

                            <WysiwygEditor @bind-Value="this.SelectedLogEntry.Temporal.Content"></WysiwygEditor>

                            <button type='submit'>Küldés</button>

                            @if (this.Display == DisplayType.EditLog)
                            {
                                <AuthorizedView NeededRolesOR="@Permissions.DeleteProject">
                                    <input type='button' class="delete" value="Törlés" @onclick="OnLogDeleteSubmit" />
                                </AuthorizedView>
                            }
                        </EditForm>
                    }
                }
                else
                {
                    <p>Neked ilyet nem szabad :(</p>
                }
                <!--#endregion-->
                break;
        }
    </main>
}

@code
{
    protected override string BaseLink { get; set; } = "member-projects";
    protected override string DataName { get; set; } = "projekt";

    private TemporalObject<LogEntry> SelectedLogEntry { get; set; }

    private enum DisplayType
    {
        Show,
        Add,
        EditSummary,
        EditLog,
        AddLog
    }

    [Parameter]
    public string LogPopupDisplay { get; set; }

    [Parameter]
    public string PopupDisplay2 { get; set; }

    private DisplayType Display
    {
        get
        {
            if (this.LogPopupDisplay == null)
            {
                if (this.NavMan.Uri.EndsWith("edit"))
                {
                    return DisplayType.EditSummary;
                }
                else if (this.NavMan.Uri.EndsWith("add"))
                {
                    return DisplayType.Add;
                }
                else
                {

                    return DisplayType.Show;
                }
            }
            else
            {
                if (this.LogPopupDisplay != "add")
                {
                    return DisplayType.EditLog;
                }
                else
                {

                    return DisplayType.AddLog;
                }
            }
        }
    }

    private bool HasLocalAuthorization
    {
        get
        {
            if (this.SelectedItem.Original.Members.Contains(this.AuthManager.CurrentMember) ||
                this.AuthManager.CurrentMember.Roles.Contains(Permissions.EditAnyProject) ||
                this.AuthManager.CurrentMember.Roles.Contains(Permissions.Overlord))
            {
                return true;
            }

            return false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() =>
        {
            this.SelectedItem = null;

            if (this.PopupDisplay == "add")
            {
                this.SelectedItem = new TemporalObject<MemberProject>(new MemberProject());
            }
            else if (this.PopupDisplay != null)
            {
                int showId = 0;
                if (int.TryParse(this.PopupDisplay, out showId))
                {
                    MemberProject item = this.ItemList.FirstOrDefault(i => i.Id == showId);
                    this.SelectedItem = new TemporalObject<MemberProject>(item);
                }
            }

            if(this.PopupDisplay2 == "log")
            {
                if (this.LogPopupDisplay == "add")
                {
                    this.SelectedLogEntry = new TemporalObject<LogEntry>(new LogEntry());
                }
                else if (this.LogPopupDisplay != null)
                {
                    int showId = 0;
                    if (int.TryParse(this.LogPopupDisplay, out showId))
                    {
                        LogEntry item = this.SelectedItem.Original.ProjectLog.FirstOrDefault(i => i.Id == showId);
                        this.SelectedLogEntry = new TemporalObject<LogEntry>(item);
                    }
                }
            }
        });
    }

    private void OnLogAddEditSubmit()
    {
        this.DialogLoading = true;

        Task.Run(() =>
        {
            //TODO
            if (this.Display == DisplayType.AddLog)
            {
                if(this.SelectedItem.Temporal.ProjectLog.Count > 0)
                {
                    this.SelectedLogEntry.Temporal.Id = this.SelectedItem.Temporal.ProjectLog.Max(log => log.Id);
                    this.SelectedLogEntry.Temporal.Id++;
                }
                else
                {
                    this.SelectedLogEntry.Temporal.Id = 1;
                }
                this.SelectedLogEntry.Temporal.StartTime = DateTime.Now;
                this.SelectedLogEntry.Temporal.Writer = this.AuthManager.CurrentMember;
                this.SelectedItem.Temporal.ProjectLog.Add(this.SelectedLogEntry.Temporal);

                this.m_Collection.Update(this.SelectedItem.FoldBack());
                GanzAdminDbEngine.Instance.Transact();

                this.JS.InvokeVoidAsync("alertify.success", $"Naplóbejegyzés hozzáadva!");
            }
            else
            {
                this.m_Collection.Update(this.SelectedItem.FoldBack());
                GanzAdminDbEngine.Instance.Transact();

                this.JS.InvokeVoidAsync("alertify.success", $"Naplóbejegyzés módosítva!");
            }

            this.DialogLoading = false;
            this.NavMan.NavigateTo($"/{BaseLink}/{PopupDisplay}");
        });
    }

    private void OnLogDeleteSubmit()
    {
        Task.Run(() =>
        {
            this.SelectedItem.Temporal.ProjectLog.Remove(this.SelectedLogEntry.Original);

            this.m_Collection.Update(this.SelectedItem.FoldBack());
            GanzAdminDbEngine.Instance.Transact();

            this.JS.InvokeVoidAsync("alertify.success", $"Naplóbejegyzés törölve :(");
            this.NavMan.NavigateTo($"/{BaseLink}/{PopupDisplay}");
        });
    }
}
