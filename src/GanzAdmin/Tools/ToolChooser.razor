@if (this.Visible)
{
    <section class='popup' id='content'>
        <div class='shadow'></div>

        <div class='body'>
            <div class='header'>
                <h2>@(this.SelectedTool != null ? this.SelectedTool.Name : "Eszközök")</h2>
                <a class='button' @onclick="() => { this.Visible = false; }"></a>
            </div>

            <div class='dynamic'>
                @if (this.SelectedTool != null)
                {
                    RenderFragment renderFragment = (builder) => { builder.OpenComponent(0, this.SelectedTool.GetType()); builder.CloseComponent(); };
                    @renderFragment
                }
                else
                {
                    foreach (ToolBase tool in this.ToolProvider.AvailableTools)
                    {
                        <a class="tool" @onclick="() => this.SelectTool(tool)">
                            <i>@tool.Icon</i>
                            <div>
                                <h3>@tool.Name</h3>
                                <p>@tool.Description</p>
                            </div>
                        </a>
                    }
                }
            </div>
        </div>
    </section>
}

@code
{
    [Inject]
    public ToolService ToolProvider { get; set; }

    [Parameter]
    public bool Visible { get; set; } = false;

    public ToolBase SelectedTool { get; set; } = null;

    public void SelectTool(ToolBase tool)
    {
        this.SelectedTool = tool;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.ToolProvider.Show += this.ShowMenu;
        this.ToolProvider.Hide += this.HideMenu;

    }

    private void ShowMenu(object sender, EventArgs e)
    {
        this.SelectedTool = null;
        this.Visible = true;
        this.StateHasChanged();
    }

    private void HideMenu(object sender, EventArgs e)
    {
        this.Visible = false;
        this.StateHasChanged();
    }

}
