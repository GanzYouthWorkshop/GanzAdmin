@if (this.ToolProvider.ShowMenu)
{
    <section class='popup' id='content'>
        <div class='shadow'></div>

        <div class='body'>
            <div class='header'>
                <h2>@(this.SelectedTool != null ? this.SelectedTool.Name : "Eszközök")</h2>
                <a class='button' @onclick="() => { this.ToolProvider.ShowMenu = false; }"></a>
            </div>

            <div class='dynamic'>
                @if (this.SelectedTool != null)
                {
                    RenderFragment renderFragment = (builder) => { builder.OpenComponent(0, this.SelectedTool.GetType()); builder.CloseComponent(); };
                    @renderFragment
                }
                else
                {
                    foreach (ToolBase tool in this.AvailableTools)
                    {
                        if (tool.SupportedEntities.Contains(this.ToolProvider.CurrentType))
                        {
                            <a class="tool" @onclick="() => this.SelectTool(tool)">
                                <i>@tool.Icon</i>
                                <div>
                                    <h3>@tool.Name</h3>
                                    <p>@tool.Description</p>
                                </div>
                            </a>
                        }
                    }
                }
            </div>
        </div>
    </section>
}

@code
{
    [Inject]
    public ToolService ToolProvider { get; set; }

    private List<ToolBase> AvailableTools
    {
        get
        {
            if(!this.collectingFinished)
            {
                IEnumerable<Type> tools = typeof(ToolBase).Assembly.GetTypes().Where(t => t.IsSubclassOf(typeof(ToolBase)));
                foreach(Type tool in tools)
                {
                    this.collectedTools.Add((ToolBase)Activator.CreateInstance(tool));
                }
                this.collectingFinished = true;
            }
            return this.collectedTools;
        }
    }
    private List<ToolBase> collectedTools = new List<ToolBase>();
    private bool collectingFinished = false;

    public ToolBase SelectedTool { get; set; } = null;

    public void SelectTool(ToolBase tool)
    {
        tool.Entities = this.ToolProvider.CheckedItems;
        this.SelectedTool = tool;
    }
}
